package com.tinymonster.strangerdiary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tinymonster.strangerdiary.bean.DiaryBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIARY_BEAN".
*/
public class DiaryBeanDao extends AbstractDao<DiaryBean, Long> {

    public static final String TABLENAME = "DIARY_BEAN";

    /**
     * Properties of entity DiaryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Disk_id = new Property(0, Long.class, "Disk_id", true, "_id");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property UserId = new Property(2, Long.class, "userId", false, "USER_ID");
        public final static Property Date = new Property(3, Long.class, "date", false, "DATE");
        public final static Property Weather = new Property(4, String.class, "weather", false, "WEATHER");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
        public final static Property Label = new Property(6, String.class, "label", false, "LABEL");
        public final static Property IsSyn = new Property(7, String.class, "isSyn", false, "IS_SYN");
        public final static Property Sprit = new Property(8, String.class, "sprit", false, "SPRIT");
        public final static Property PicNum = new Property(9, Integer.class, "picNum", false, "PIC_NUM");
        public final static Property Addition1 = new Property(10, String.class, "addition1", false, "ADDITION1");
        public final static Property Addition2 = new Property(11, String.class, "addition2", false, "ADDITION2");
        public final static Property Content = new Property(12, String.class, "content", false, "CONTENT");
    }


    public DiaryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DiaryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIARY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: Disk_id
                "\"ID\" INTEGER," + // 1: id
                "\"USER_ID\" INTEGER," + // 2: userId
                "\"DATE\" INTEGER," + // 3: date
                "\"WEATHER\" TEXT," + // 4: weather
                "\"LOCATION\" TEXT," + // 5: location
                "\"LABEL\" TEXT," + // 6: label
                "\"IS_SYN\" TEXT," + // 7: isSyn
                "\"SPRIT\" TEXT," + // 8: sprit
                "\"PIC_NUM\" INTEGER," + // 9: picNum
                "\"ADDITION1\" TEXT," + // 10: addition1
                "\"ADDITION2\" TEXT," + // 11: addition2
                "\"CONTENT\" TEXT);"); // 12: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIARY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DiaryBean entity) {
        stmt.clearBindings();
 
        Long Disk_id = entity.getDisk_id();
        if (Disk_id != null) {
            stmt.bindLong(1, Disk_id);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(5, weather);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(7, label);
        }
 
        String isSyn = entity.getIsSyn();
        if (isSyn != null) {
            stmt.bindString(8, isSyn);
        }
 
        String sprit = entity.getSprit();
        if (sprit != null) {
            stmt.bindString(9, sprit);
        }
 
        Integer picNum = entity.getPicNum();
        if (picNum != null) {
            stmt.bindLong(10, picNum);
        }
 
        String addition1 = entity.getAddition1();
        if (addition1 != null) {
            stmt.bindString(11, addition1);
        }
 
        String addition2 = entity.getAddition2();
        if (addition2 != null) {
            stmt.bindString(12, addition2);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(13, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DiaryBean entity) {
        stmt.clearBindings();
 
        Long Disk_id = entity.getDisk_id();
        if (Disk_id != null) {
            stmt.bindLong(1, Disk_id);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        Long date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(5, weather);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(7, label);
        }
 
        String isSyn = entity.getIsSyn();
        if (isSyn != null) {
            stmt.bindString(8, isSyn);
        }
 
        String sprit = entity.getSprit();
        if (sprit != null) {
            stmt.bindString(9, sprit);
        }
 
        Integer picNum = entity.getPicNum();
        if (picNum != null) {
            stmt.bindLong(10, picNum);
        }
 
        String addition1 = entity.getAddition1();
        if (addition1 != null) {
            stmt.bindString(11, addition1);
        }
 
        String addition2 = entity.getAddition2();
        if (addition2 != null) {
            stmt.bindString(12, addition2);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(13, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DiaryBean readEntity(Cursor cursor, int offset) {
        DiaryBean entity = new DiaryBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Disk_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // weather
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // label
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isSyn
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sprit
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // picNum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // addition1
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // addition2
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DiaryBean entity, int offset) {
        entity.setDisk_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setWeather(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLabel(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsSyn(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSprit(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPicNum(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setAddition1(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAddition2(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setContent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DiaryBean entity, long rowId) {
        entity.setDisk_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DiaryBean entity) {
        if(entity != null) {
            return entity.getDisk_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DiaryBean entity) {
        return entity.getDisk_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
