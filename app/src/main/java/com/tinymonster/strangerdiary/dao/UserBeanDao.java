package com.tinymonster.strangerdiary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tinymonster.strangerdiary.bean.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Gesture = new Property(4, String.class, "gesture", false, "GESTURE");
        public final static Property DiaryNum = new Property(5, Integer.class, "diaryNum", false, "DIARY_NUM");
        public final static Property DiarySpace = new Property(6, Integer.class, "diarySpace", false, "DIARY_SPACE");
        public final static Property Createtime = new Property(7, Long.class, "createtime", false, "CREATETIME");
        public final static Property Icon = new Property(8, String.class, "icon", false, "ICON");
        public final static Property Tag = new Property(9, String.class, "tag", false, "TAG");
        public final static Property Level = new Property(10, Integer.class, "level", false, "LEVEL");
        public final static Property Version = new Property(11, Integer.class, "version", false, "VERSION");
        public final static Property Addition1 = new Property(12, String.class, "addition1", false, "ADDITION1");
        public final static Property Addition2 = new Property(13, String.class, "addition2", false, "ADDITION2");
        public final static Property Addition3 = new Property(14, String.class, "addition3", false, "ADDITION3");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACCOUNT\" TEXT," + // 1: account
                "\"NICKNAME\" TEXT," + // 2: nickname
                "\"PASSWORD\" TEXT," + // 3: password
                "\"GESTURE\" TEXT," + // 4: gesture
                "\"DIARY_NUM\" INTEGER," + // 5: diaryNum
                "\"DIARY_SPACE\" INTEGER," + // 6: diarySpace
                "\"CREATETIME\" INTEGER," + // 7: createtime
                "\"ICON\" TEXT," + // 8: icon
                "\"TAG\" TEXT," + // 9: tag
                "\"LEVEL\" INTEGER," + // 10: level
                "\"VERSION\" INTEGER," + // 11: version
                "\"ADDITION1\" TEXT," + // 12: addition1
                "\"ADDITION2\" TEXT," + // 13: addition2
                "\"ADDITION3\" TEXT);"); // 14: addition3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String gesture = entity.getGesture();
        if (gesture != null) {
            stmt.bindString(5, gesture);
        }
 
        Integer diaryNum = entity.getDiaryNum();
        if (diaryNum != null) {
            stmt.bindLong(6, diaryNum);
        }
 
        Integer diarySpace = entity.getDiarySpace();
        if (diarySpace != null) {
            stmt.bindLong(7, diarySpace);
        }
 
        Long createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(8, createtime);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(9, icon);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(10, tag);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(11, level);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(12, version);
        }
 
        String addition1 = entity.getAddition1();
        if (addition1 != null) {
            stmt.bindString(13, addition1);
        }
 
        String addition2 = entity.getAddition2();
        if (addition2 != null) {
            stmt.bindString(14, addition2);
        }
 
        String addition3 = entity.getAddition3();
        if (addition3 != null) {
            stmt.bindString(15, addition3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String gesture = entity.getGesture();
        if (gesture != null) {
            stmt.bindString(5, gesture);
        }
 
        Integer diaryNum = entity.getDiaryNum();
        if (diaryNum != null) {
            stmt.bindLong(6, diaryNum);
        }
 
        Integer diarySpace = entity.getDiarySpace();
        if (diarySpace != null) {
            stmt.bindLong(7, diarySpace);
        }
 
        Long createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(8, createtime);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(9, icon);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(10, tag);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(11, level);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(12, version);
        }
 
        String addition1 = entity.getAddition1();
        if (addition1 != null) {
            stmt.bindString(13, addition1);
        }
 
        String addition2 = entity.getAddition2();
        if (addition2 != null) {
            stmt.bindString(14, addition2);
        }
 
        String addition3 = entity.getAddition3();
        if (addition3 != null) {
            stmt.bindString(15, addition3);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gesture
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // diaryNum
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // diarySpace
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // createtime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // icon
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tag
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // level
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // version
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // addition1
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // addition2
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // addition3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGesture(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDiaryNum(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDiarySpace(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setCreatetime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setIcon(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTag(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLevel(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setVersion(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setAddition1(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAddition2(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAddition3(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
